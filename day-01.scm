;; read from input file
(define day01-input (with-input-from-file "day01.in"
  (lambda ()
    (let loop ((lines '())
               (next-line (read-line)))
       (if (eof-object? next-line)
           (reverse lines)
           (loop (cons next-line lines)
                 (read-line)))))))

;; part 1:
(define (decode-lines lines)
  (define (decode-line line)
    (define (get-number nums first last)
      (cond ((null? nums)
             (string->number (list->string (list first last))))
            ((null? first)
             (get-number (cdr nums) (car nums) (car nums)))
            (else
              (get-number (cdr nums) first (car nums)))))
    (get-number (filter char-numeric? (string->list line)) '() '()))
  (reduce + 0 (map decode-line lines)))

;; part 2:
(define (first-digit str)
  (define (first-digit-impl iter acc)
    (cond ((null? iter) #f)
          ((or (substring? "1" acc)
               (substring? "one" acc)) "1")
          ((or (substring? "2" acc)
               (substring? "two" acc)) "2")
          ((or (substring? "3" acc)
               (substring? "three" acc)) "3")
          ((or (substring? "4" acc)
               (substring? "four" acc)) "4")
          ((or (substring? "5" acc)
               (substring? "five" acc)) "5")
          ((or (substring? "6" acc)
               (substring? "six" acc)) "6")
          ((or (substring? "7" acc)
               (substring? "seven" acc)) "7")
          ((or (substring? "8" acc)
               (substring? "eight" acc)) "8")
          ((or (substring? "9" acc)
               (substring? "nine" acc)) "9")
          (else (first-digit-impl (cdr iter) (string acc (car iter))))))
  (first-digit-impl (string->list str) ""))

(define (last-digit str)
  (define (last-digit-impl iter acc)
    (cond ((null? iter) #f)
          ((or (substring? "1" acc)
               (substring? "one" acc)) "1")
          ((or (substring? "2" acc)
               (substring? "two" acc)) "2")
          ((or (substring? "3" acc)
               (substring? "three" acc)) "3")
          ((or (substring? "4" acc)
               (substring? "four" acc)) "4")
          ((or (substring? "5" acc)
               (substring? "five" acc)) "5")
          ((or (substring? "6" acc)
               (substring? "six" acc)) "6")
          ((or (substring? "7" acc)
               (substring? "seven" acc)) "7")
          ((or (substring? "8" acc)
               (substring? "eight" acc)) "8")
          ((or (substring? "9" acc)
               (substring? "nine" acc)) "9")
          (else (last-digit-impl (cdr iter) (string (car iter) acc)))))
  (last-digit-impl (reverse (string->list str)) ""))

(define (decode-real-lines lines)
  (define (first-and-last-num line)
    (string (first-digit line) (last-digit line)))
  (decode-lines (map first-and-last-num lines)))
